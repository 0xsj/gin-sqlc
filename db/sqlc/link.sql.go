// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: link.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createLink = `-- name: CreateLink :one
INSERT INTO links (
    user_id, title, url, description, icon, custom_thumbnail_url, position, is_active
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING link_id, user_id, title, url, description, icon, custom_thumbnail_url, position, is_active, click_count, created_at, updated_at
`

type CreateLinkParams struct {
	UserID             uuid.UUID `json:"user_id"`
	Title              string    `json:"title"`
	Url                string    `json:"url"`
	Description        *string   `json:"description"`
	Icon               *string   `json:"icon"`
	CustomThumbnailUrl *string   `json:"custom_thumbnail_url"`
	Position           int32     `json:"position"`
	IsActive           *bool     `json:"is_active"`
}

func (q *Queries) CreateLink(ctx context.Context, arg CreateLinkParams) (*Link, error) {
	row := q.db.QueryRow(ctx, createLink,
		arg.UserID,
		arg.Title,
		arg.Url,
		arg.Description,
		arg.Icon,
		arg.CustomThumbnailUrl,
		arg.Position,
		arg.IsActive,
	)
	var i Link
	err := row.Scan(
		&i.LinkID,
		&i.UserID,
		&i.Title,
		&i.Url,
		&i.Description,
		&i.Icon,
		&i.CustomThumbnailUrl,
		&i.Position,
		&i.IsActive,
		&i.ClickCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const deleteLink = `-- name: DeleteLink :exec
DELETE FROM links
WHERE link_id = $1
`

func (q *Queries) DeleteLink(ctx context.Context, linkID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteLink, linkID)
	return err
}

const deleteUserLinks = `-- name: DeleteUserLinks :exec
DELETE FROM links
WHERE user_id = $1
`

func (q *Queries) DeleteUserLinks(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUserLinks, userID)
	return err
}

const getActiveLinksByUserID = `-- name: GetActiveLinksByUserID :many
SELECT link_id, user_id, title, url, description, icon, custom_thumbnail_url, position, is_active, click_count, created_at, updated_at FROM links
WHERE user_id = $1 AND is_active = true
ORDER BY position ASC
`

func (q *Queries) GetActiveLinksByUserID(ctx context.Context, userID uuid.UUID) ([]*Link, error) {
	rows, err := q.db.Query(ctx, getActiveLinksByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Link
	for rows.Next() {
		var i Link
		if err := rows.Scan(
			&i.LinkID,
			&i.UserID,
			&i.Title,
			&i.Url,
			&i.Description,
			&i.Icon,
			&i.CustomThumbnailUrl,
			&i.Position,
			&i.IsActive,
			&i.ClickCount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLink = `-- name: GetLink :one
SELECT link_id, user_id, title, url, description, icon, custom_thumbnail_url, position, is_active, click_count, created_at, updated_at FROM links
WHERE link_id = $1 LIMIT 1
`

func (q *Queries) GetLink(ctx context.Context, linkID uuid.UUID) (*Link, error) {
	row := q.db.QueryRow(ctx, getLink, linkID)
	var i Link
	err := row.Scan(
		&i.LinkID,
		&i.UserID,
		&i.Title,
		&i.Url,
		&i.Description,
		&i.Icon,
		&i.CustomThumbnailUrl,
		&i.Position,
		&i.IsActive,
		&i.ClickCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getLinksByUserID = `-- name: GetLinksByUserID :many
SELECT link_id, user_id, title, url, description, icon, custom_thumbnail_url, position, is_active, click_count, created_at, updated_at FROM links
WHERE user_id = $1
ORDER BY position ASC
`

func (q *Queries) GetLinksByUserID(ctx context.Context, userID uuid.UUID) ([]*Link, error) {
	rows, err := q.db.Query(ctx, getLinksByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Link
	for rows.Next() {
		var i Link
		if err := rows.Scan(
			&i.LinkID,
			&i.UserID,
			&i.Title,
			&i.Url,
			&i.Description,
			&i.Icon,
			&i.CustomThumbnailUrl,
			&i.Position,
			&i.IsActive,
			&i.ClickCount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const incrementLinkClickCount = `-- name: IncrementLinkClickCount :exec
UPDATE links
SET
    click_count = click_count + 1,
    updated_at = CURRENT_TIMESTAMP
WHERE link_id = $1
`

func (q *Queries) IncrementLinkClickCount(ctx context.Context, linkID uuid.UUID) error {
	_, err := q.db.Exec(ctx, incrementLinkClickCount, linkID)
	return err
}

const updateLink = `-- name: UpdateLink :exec
UPDATE links
SET
    title = COALESCE($2, title),
    url = COALESCE($3, url),
    description = COALESCE($4, description),
    icon = COALESCE($5, icon),
    custom_thumbnail_url = COALESCE($6, custom_thumbnail_url),
    is_active = COALESCE($7, is_active),
    updated_at = CURRENT_TIMESTAMP
WHERE link_id = $1
`

type UpdateLinkParams struct {
	LinkID             uuid.UUID `json:"link_id"`
	Title              string    `json:"title"`
	Url                string    `json:"url"`
	Description        *string   `json:"description"`
	Icon               *string   `json:"icon"`
	CustomThumbnailUrl *string   `json:"custom_thumbnail_url"`
	IsActive           *bool     `json:"is_active"`
}

func (q *Queries) UpdateLink(ctx context.Context, arg UpdateLinkParams) error {
	_, err := q.db.Exec(ctx, updateLink,
		arg.LinkID,
		arg.Title,
		arg.Url,
		arg.Description,
		arg.Icon,
		arg.CustomThumbnailUrl,
		arg.IsActive,
	)
	return err
}

const updateLinkPosition = `-- name: UpdateLinkPosition :exec
UPDATE links
SET
    position = $2,
    updated_at = CURRENT_TIMESTAMP
WHERE link_id = $1
`

type UpdateLinkPositionParams struct {
	LinkID   uuid.UUID `json:"link_id"`
	Position int32     `json:"position"`
}

func (q *Queries) UpdateLinkPosition(ctx context.Context, arg UpdateLinkPositionParams) error {
	_, err := q.db.Exec(ctx, updateLinkPosition, arg.LinkID, arg.Position)
	return err
}
