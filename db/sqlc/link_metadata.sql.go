// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: link_metadata.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createLinkMetadata = `-- name: CreateLinkMetadata :one
INSERT INTO link_metadata (
    domain, url, title, description, favicon_url, image_url,
    platform_name, platform_type, platform_color, is_verified
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
) RETURNING metadata_id, domain, url, title, description, favicon_url, image_url, platform_name, platform_type, platform_color, is_verified, created_at, updated_at
`

type CreateLinkMetadataParams struct {
	Domain        string  `json:"domain"`
	Url           string  `json:"url"`
	Title         *string `json:"title"`
	Description   *string `json:"description"`
	FaviconUrl    *string `json:"favicon_url"`
	ImageUrl      *string `json:"image_url"`
	PlatformName  *string `json:"platform_name"`
	PlatformType  *string `json:"platform_type"`
	PlatformColor *string `json:"platform_color"`
	IsVerified    *bool   `json:"is_verified"`
}

func (q *Queries) CreateLinkMetadata(ctx context.Context, arg CreateLinkMetadataParams) (*LinkMetadatum, error) {
	row := q.db.QueryRow(ctx, createLinkMetadata,
		arg.Domain,
		arg.Url,
		arg.Title,
		arg.Description,
		arg.FaviconUrl,
		arg.ImageUrl,
		arg.PlatformName,
		arg.PlatformType,
		arg.PlatformColor,
		arg.IsVerified,
	)
	var i LinkMetadatum
	err := row.Scan(
		&i.MetadataID,
		&i.Domain,
		&i.Url,
		&i.Title,
		&i.Description,
		&i.FaviconUrl,
		&i.ImageUrl,
		&i.PlatformName,
		&i.PlatformType,
		&i.PlatformColor,
		&i.IsVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const deleteLinkMetadata = `-- name: DeleteLinkMetadata :exec
DELETE FROM link_metadata
WHERE metadata_id = $1
`

func (q *Queries) DeleteLinkMetadata(ctx context.Context, metadataID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteLinkMetadata, metadataID)
	return err
}

const getLinkMetadataByDomain = `-- name: GetLinkMetadataByDomain :many
SELECT metadata_id, domain, url, title, description, favicon_url, image_url, platform_name, platform_type, platform_color, is_verified, created_at, updated_at FROM link_metadata
WHERE domain = $1
ORDER BY created_at DESC
`

func (q *Queries) GetLinkMetadataByDomain(ctx context.Context, domain string) ([]*LinkMetadatum, error) {
	rows, err := q.db.Query(ctx, getLinkMetadataByDomain, domain)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*LinkMetadatum
	for rows.Next() {
		var i LinkMetadatum
		if err := rows.Scan(
			&i.MetadataID,
			&i.Domain,
			&i.Url,
			&i.Title,
			&i.Description,
			&i.FaviconUrl,
			&i.ImageUrl,
			&i.PlatformName,
			&i.PlatformType,
			&i.PlatformColor,
			&i.IsVerified,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLinkMetadataByURL = `-- name: GetLinkMetadataByURL :one
SELECT metadata_id, domain, url, title, description, favicon_url, image_url, platform_name, platform_type, platform_color, is_verified, created_at, updated_at FROM link_metadata
WHERE url = $1 LIMIT 1
`

func (q *Queries) GetLinkMetadataByURL(ctx context.Context, url string) (*LinkMetadatum, error) {
	row := q.db.QueryRow(ctx, getLinkMetadataByURL, url)
	var i LinkMetadatum
	err := row.Scan(
		&i.MetadataID,
		&i.Domain,
		&i.Url,
		&i.Title,
		&i.Description,
		&i.FaviconUrl,
		&i.ImageUrl,
		&i.PlatformName,
		&i.PlatformType,
		&i.PlatformColor,
		&i.IsVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const updateLinkMetadata = `-- name: UpdateLinkMetadata :one
UPDATE link_metadata
SET
    title = COALESCE($2, title),
    description = COALESCE($3, description),
    favicon_url = COALESCE($4, favicon_url),
    image_url = COALESCE($5, image_url),
    platform_name = COALESCE($6, platform_name),
    platform_type = COALESCE($7, platform_type),
    platform_color = COALESCE($8, platform_color),
    is_verified = COALESCE($9, is_verified),
    updated_at = CURRENT_TIMESTAMP
WHERE url = $1
RETURNING metadata_id, domain, url, title, description, favicon_url, image_url, platform_name, platform_type, platform_color, is_verified, created_at, updated_at
`

type UpdateLinkMetadataParams struct {
	Url           string  `json:"url"`
	Title         *string `json:"title"`
	Description   *string `json:"description"`
	FaviconUrl    *string `json:"favicon_url"`
	ImageUrl      *string `json:"image_url"`
	PlatformName  *string `json:"platform_name"`
	PlatformType  *string `json:"platform_type"`
	PlatformColor *string `json:"platform_color"`
	IsVerified    *bool   `json:"is_verified"`
}

func (q *Queries) UpdateLinkMetadata(ctx context.Context, arg UpdateLinkMetadataParams) (*LinkMetadatum, error) {
	row := q.db.QueryRow(ctx, updateLinkMetadata,
		arg.Url,
		arg.Title,
		arg.Description,
		arg.FaviconUrl,
		arg.ImageUrl,
		arg.PlatformName,
		arg.PlatformType,
		arg.PlatformColor,
		arg.IsVerified,
	)
	var i LinkMetadatum
	err := row.Scan(
		&i.MetadataID,
		&i.Domain,
		&i.Url,
		&i.Title,
		&i.Description,
		&i.FaviconUrl,
		&i.ImageUrl,
		&i.PlatformName,
		&i.PlatformType,
		&i.PlatformColor,
		&i.IsVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
