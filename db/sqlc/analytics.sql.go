// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: analytics.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const deleteUserAnalytics = `-- name: DeleteUserAnalytics :exec
DELETE FROM analytics
WHERE user_id = $1
`

func (q *Queries) DeleteUserAnalytics(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUserAnalytics, userID)
	return err
}

const getClickAnalyticsByDateRange = `-- name: GetClickAnalyticsByDateRange :many
SELECT 
    DATE(a.clicked_at) as date,
    COUNT(a.analytics_id) as click_count
FROM analytics a
WHERE a.user_id = $1 
AND a.clicked_at >= $2
AND a.clicked_at <= $3
GROUP BY DATE(a.clicked_at)
ORDER BY DATE(a.clicked_at)
`

type GetClickAnalyticsByDateRangeParams struct {
	UserID      uuid.UUID  `json:"user_id"`
	ClickedAt   *time.Time `json:"clicked_at"`
	ClickedAt_2 *time.Time `json:"clicked_at_2"`
}

type GetClickAnalyticsByDateRangeRow struct {
	Date       time.Time `json:"date"`
	ClickCount int64     `json:"click_count"`
}

func (q *Queries) GetClickAnalyticsByDateRange(ctx context.Context, arg GetClickAnalyticsByDateRangeParams) ([]*GetClickAnalyticsByDateRangeRow, error) {
	rows, err := q.db.Query(ctx, getClickAnalyticsByDateRange, arg.UserID, arg.ClickedAt, arg.ClickedAt_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetClickAnalyticsByDateRangeRow
	for rows.Next() {
		var i GetClickAnalyticsByDateRangeRow
		if err := rows.Scan(&i.Date, &i.ClickCount); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getClickAnalyticsByReferrer = `-- name: GetClickAnalyticsByReferrer :many
SELECT 
    COALESCE(a.referrer, 'direct') as referrer,
    COUNT(a.analytics_id) as click_count
FROM analytics a
WHERE a.user_id = $1
GROUP BY COALESCE(a.referrer, 'direct')
ORDER BY click_count DESC
`

type GetClickAnalyticsByReferrerRow struct {
	Referrer   string `json:"referrer"`
	ClickCount int64  `json:"click_count"`
}

func (q *Queries) GetClickAnalyticsByReferrer(ctx context.Context, userID uuid.UUID) ([]*GetClickAnalyticsByReferrerRow, error) {
	rows, err := q.db.Query(ctx, getClickAnalyticsByReferrer, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetClickAnalyticsByReferrerRow
	for rows.Next() {
		var i GetClickAnalyticsByReferrerRow
		if err := rows.Scan(&i.Referrer, &i.ClickCount); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLinkClicksByUserID = `-- name: GetLinkClicksByUserID :many
SELECT 
    l.link_id,
    l.title,
    l.url,
    COUNT(a.analytics_id) as click_count
FROM links l
LEFT JOIN analytics a ON l.link_id = a.link_id
WHERE l.user_id = $1
GROUP BY l.link_id, l.title, l.url
ORDER BY click_count DESC
`

type GetLinkClicksByUserIDRow struct {
	LinkID     uuid.UUID `json:"link_id"`
	Title      string    `json:"title"`
	Url        string    `json:"url"`
	ClickCount int64     `json:"click_count"`
}

func (q *Queries) GetLinkClicksByUserID(ctx context.Context, userID uuid.UUID) ([]*GetLinkClicksByUserIDRow, error) {
	rows, err := q.db.Query(ctx, getLinkClicksByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetLinkClicksByUserIDRow
	for rows.Next() {
		var i GetLinkClicksByUserIDRow
		if err := rows.Scan(
			&i.LinkID,
			&i.Title,
			&i.Url,
			&i.ClickCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSocialLinkClicksByUserID = `-- name: GetSocialLinkClicksByUserID :many
SELECT 
    sl.social_link_id,
    sl.platform,
    sl.username,
    COUNT(a.analytics_id) as click_count
FROM social_links sl
LEFT JOIN analytics a ON sl.social_link_id = a.social_link_id
WHERE sl.user_id = $1
GROUP BY sl.social_link_id, sl.platform, sl.username
ORDER BY click_count DESC
`

type GetSocialLinkClicksByUserIDRow struct {
	SocialLinkID uuid.UUID `json:"social_link_id"`
	Platform     string    `json:"platform"`
	Username     string    `json:"username"`
	ClickCount   int64     `json:"click_count"`
}

func (q *Queries) GetSocialLinkClicksByUserID(ctx context.Context, userID uuid.UUID) ([]*GetSocialLinkClicksByUserIDRow, error) {
	rows, err := q.db.Query(ctx, getSocialLinkClicksByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetSocialLinkClicksByUserIDRow
	for rows.Next() {
		var i GetSocialLinkClicksByUserIDRow
		if err := rows.Scan(
			&i.SocialLinkID,
			&i.Platform,
			&i.Username,
			&i.ClickCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const recordLinkClick = `-- name: RecordLinkClick :one
INSERT INTO analytics (
    link_id, user_id, ip_address, user_agent, referrer
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING analytics_id, link_id, social_link_id, user_id, ip_address, user_agent, referrer, clicked_at
`

type RecordLinkClickParams struct {
	LinkID    *uuid.UUID `json:"link_id"`
	UserID    uuid.UUID  `json:"user_id"`
	IpAddress *string    `json:"ip_address"`
	UserAgent *string    `json:"user_agent"`
	Referrer  *string    `json:"referrer"`
}

func (q *Queries) RecordLinkClick(ctx context.Context, arg RecordLinkClickParams) (*Analytic, error) {
	row := q.db.QueryRow(ctx, recordLinkClick,
		arg.LinkID,
		arg.UserID,
		arg.IpAddress,
		arg.UserAgent,
		arg.Referrer,
	)
	var i Analytic
	err := row.Scan(
		&i.AnalyticsID,
		&i.LinkID,
		&i.SocialLinkID,
		&i.UserID,
		&i.IpAddress,
		&i.UserAgent,
		&i.Referrer,
		&i.ClickedAt,
	)
	return &i, err
}

const recordSocialLinkClick = `-- name: RecordSocialLinkClick :one
INSERT INTO analytics (
    social_link_id, user_id, ip_address, user_agent, referrer
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING analytics_id, link_id, social_link_id, user_id, ip_address, user_agent, referrer, clicked_at
`

type RecordSocialLinkClickParams struct {
	SocialLinkID *uuid.UUID `json:"social_link_id"`
	UserID       uuid.UUID  `json:"user_id"`
	IpAddress    *string    `json:"ip_address"`
	UserAgent    *string    `json:"user_agent"`
	Referrer     *string    `json:"referrer"`
}

func (q *Queries) RecordSocialLinkClick(ctx context.Context, arg RecordSocialLinkClickParams) (*Analytic, error) {
	row := q.db.QueryRow(ctx, recordSocialLinkClick,
		arg.SocialLinkID,
		arg.UserID,
		arg.IpAddress,
		arg.UserAgent,
		arg.Referrer,
	)
	var i Analytic
	err := row.Scan(
		&i.AnalyticsID,
		&i.LinkID,
		&i.SocialLinkID,
		&i.UserID,
		&i.IpAddress,
		&i.UserAgent,
		&i.Referrer,
		&i.ClickedAt,
	)
	return &i, err
}
