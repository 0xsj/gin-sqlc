// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: auth.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createAuth = `-- name: CreateAuth :one
INSERT INTO auth (
    user_id, password_hash, salt, is_email_verified, verification_token
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING auth_id, user_id, password_hash, salt, is_email_verified, verification_token, reset_token, reset_token_expires_at, last_login, updated_at
`

type CreateAuthParams struct {
	UserID            uuid.UUID `json:"user_id"`
	PasswordHash      string    `json:"password_hash"`
	Salt              string    `json:"salt"`
	IsEmailVerified   *bool     `json:"is_email_verified"`
	VerificationToken *string   `json:"verification_token"`
}

func (q *Queries) CreateAuth(ctx context.Context, arg CreateAuthParams) (*Auth, error) {
	row := q.db.QueryRow(ctx, createAuth,
		arg.UserID,
		arg.PasswordHash,
		arg.Salt,
		arg.IsEmailVerified,
		arg.VerificationToken,
	)
	var i Auth
	err := row.Scan(
		&i.AuthID,
		&i.UserID,
		&i.PasswordHash,
		&i.Salt,
		&i.IsEmailVerified,
		&i.VerificationToken,
		&i.ResetToken,
		&i.ResetTokenExpiresAt,
		&i.LastLogin,
		&i.UpdatedAt,
	)
	return &i, err
}

const deleteAuth = `-- name: DeleteAuth :exec
DELETE FROM auth
WHERE user_id = $1
`

func (q *Queries) DeleteAuth(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteAuth, userID)
	return err
}

const getAuthByResetToken = `-- name: GetAuthByResetToken :one
SELECT auth_id, user_id, password_hash, salt, is_email_verified, verification_token, reset_token, reset_token_expires_at, last_login, updated_at FROM auth
WHERE reset_token = $1 
AND reset_token_expires_at > CURRENT_TIMESTAMP
LIMIT 1
`

func (q *Queries) GetAuthByResetToken(ctx context.Context, resetToken *string) (*Auth, error) {
	row := q.db.QueryRow(ctx, getAuthByResetToken, resetToken)
	var i Auth
	err := row.Scan(
		&i.AuthID,
		&i.UserID,
		&i.PasswordHash,
		&i.Salt,
		&i.IsEmailVerified,
		&i.VerificationToken,
		&i.ResetToken,
		&i.ResetTokenExpiresAt,
		&i.LastLogin,
		&i.UpdatedAt,
	)
	return &i, err
}

const getAuthByUserID = `-- name: GetAuthByUserID :one
SELECT auth_id, user_id, password_hash, salt, is_email_verified, verification_token, reset_token, reset_token_expires_at, last_login, updated_at FROM auth
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetAuthByUserID(ctx context.Context, userID uuid.UUID) (*Auth, error) {
	row := q.db.QueryRow(ctx, getAuthByUserID, userID)
	var i Auth
	err := row.Scan(
		&i.AuthID,
		&i.UserID,
		&i.PasswordHash,
		&i.Salt,
		&i.IsEmailVerified,
		&i.VerificationToken,
		&i.ResetToken,
		&i.ResetTokenExpiresAt,
		&i.LastLogin,
		&i.UpdatedAt,
	)
	return &i, err
}

const updateLastLogin = `-- name: UpdateLastLogin :exec
UPDATE auth
SET
    last_login = CURRENT_TIMESTAMP,
    updated_at = CURRENT_TIMESTAMP
WHERE user_id = $1
`

func (q *Queries) UpdateLastLogin(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, updateLastLogin, userID)
	return err
}

const updatePassword = `-- name: UpdatePassword :exec
UPDATE auth
SET
    password_hash = $2,
    salt = $3,
    updated_at = CURRENT_TIMESTAMP
WHERE user_id = $1
`

type UpdatePasswordParams struct {
	UserID       uuid.UUID `json:"user_id"`
	PasswordHash string    `json:"password_hash"`
	Salt         string    `json:"salt"`
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.Exec(ctx, updatePassword, arg.UserID, arg.PasswordHash, arg.Salt)
	return err
}

const updateResetToken = `-- name: UpdateResetToken :exec
UPDATE auth
SET
    reset_token = $2,
    reset_token_expires_at = $3,
    updated_at = CURRENT_TIMESTAMP
WHERE user_id = $1
`

type UpdateResetTokenParams struct {
	UserID              uuid.UUID  `json:"user_id"`
	ResetToken          *string    `json:"reset_token"`
	ResetTokenExpiresAt *time.Time `json:"reset_token_expires_at"`
}

func (q *Queries) UpdateResetToken(ctx context.Context, arg UpdateResetTokenParams) error {
	_, err := q.db.Exec(ctx, updateResetToken, arg.UserID, arg.ResetToken, arg.ResetTokenExpiresAt)
	return err
}

const updateVerificationStatus = `-- name: UpdateVerificationStatus :exec
UPDATE auth
SET
    is_email_verified = $2,
    verification_token = NULL,
    updated_at = CURRENT_TIMESTAMP
WHERE user_id = $1
`

type UpdateVerificationStatusParams struct {
	UserID          uuid.UUID `json:"user_id"`
	IsEmailVerified *bool     `json:"is_email_verified"`
}

func (q *Queries) UpdateVerificationStatus(ctx context.Context, arg UpdateVerificationStatusParams) error {
	_, err := q.db.Exec(ctx, updateVerificationStatus, arg.UserID, arg.IsEmailVerified)
	return err
}
