// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: social_link.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createSocialLink = `-- name: CreateSocialLink :one
INSERT INTO social_links (
    user_id, platform, username, url, position, is_active
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING social_link_id, user_id, platform, username, url, position, is_active, created_at, updated_at
`

type CreateSocialLinkParams struct {
	UserID   uuid.UUID `json:"user_id"`
	Platform string    `json:"platform"`
	Username string    `json:"username"`
	Url      string    `json:"url"`
	Position int32     `json:"position"`
	IsActive *bool     `json:"is_active"`
}

func (q *Queries) CreateSocialLink(ctx context.Context, arg CreateSocialLinkParams) (*SocialLink, error) {
	row := q.db.QueryRow(ctx, createSocialLink,
		arg.UserID,
		arg.Platform,
		arg.Username,
		arg.Url,
		arg.Position,
		arg.IsActive,
	)
	var i SocialLink
	err := row.Scan(
		&i.SocialLinkID,
		&i.UserID,
		&i.Platform,
		&i.Username,
		&i.Url,
		&i.Position,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const deleteSocialLink = `-- name: DeleteSocialLink :exec
DELETE FROM social_links
WHERE social_link_id = $1
`

func (q *Queries) DeleteSocialLink(ctx context.Context, socialLinkID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteSocialLink, socialLinkID)
	return err
}

const deleteUserSocialLinks = `-- name: DeleteUserSocialLinks :exec
DELETE FROM social_links
WHERE user_id = $1
`

func (q *Queries) DeleteUserSocialLinks(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUserSocialLinks, userID)
	return err
}

const getActiveSocialLinksByUserID = `-- name: GetActiveSocialLinksByUserID :many
SELECT social_link_id, user_id, platform, username, url, position, is_active, created_at, updated_at FROM social_links
WHERE user_id = $1 AND is_active = true
ORDER BY position ASC
`

func (q *Queries) GetActiveSocialLinksByUserID(ctx context.Context, userID uuid.UUID) ([]*SocialLink, error) {
	rows, err := q.db.Query(ctx, getActiveSocialLinksByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*SocialLink
	for rows.Next() {
		var i SocialLink
		if err := rows.Scan(
			&i.SocialLinkID,
			&i.UserID,
			&i.Platform,
			&i.Username,
			&i.Url,
			&i.Position,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSocialLink = `-- name: GetSocialLink :one
SELECT social_link_id, user_id, platform, username, url, position, is_active, created_at, updated_at FROM social_links
WHERE social_link_id = $1 LIMIT 1
`

func (q *Queries) GetSocialLink(ctx context.Context, socialLinkID uuid.UUID) (*SocialLink, error) {
	row := q.db.QueryRow(ctx, getSocialLink, socialLinkID)
	var i SocialLink
	err := row.Scan(
		&i.SocialLinkID,
		&i.UserID,
		&i.Platform,
		&i.Username,
		&i.Url,
		&i.Position,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getSocialLinkByPlatform = `-- name: GetSocialLinkByPlatform :one
SELECT social_link_id, user_id, platform, username, url, position, is_active, created_at, updated_at FROM social_links
WHERE user_id = $1 AND platform = $2
LIMIT 1
`

type GetSocialLinkByPlatformParams struct {
	UserID   uuid.UUID `json:"user_id"`
	Platform string    `json:"platform"`
}

func (q *Queries) GetSocialLinkByPlatform(ctx context.Context, arg GetSocialLinkByPlatformParams) (*SocialLink, error) {
	row := q.db.QueryRow(ctx, getSocialLinkByPlatform, arg.UserID, arg.Platform)
	var i SocialLink
	err := row.Scan(
		&i.SocialLinkID,
		&i.UserID,
		&i.Platform,
		&i.Username,
		&i.Url,
		&i.Position,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getSocialLinksByUserID = `-- name: GetSocialLinksByUserID :many
SELECT social_link_id, user_id, platform, username, url, position, is_active, created_at, updated_at FROM social_links
WHERE user_id = $1
ORDER BY position ASC
`

func (q *Queries) GetSocialLinksByUserID(ctx context.Context, userID uuid.UUID) ([]*SocialLink, error) {
	rows, err := q.db.Query(ctx, getSocialLinksByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*SocialLink
	for rows.Next() {
		var i SocialLink
		if err := rows.Scan(
			&i.SocialLinkID,
			&i.UserID,
			&i.Platform,
			&i.Username,
			&i.Url,
			&i.Position,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSocialLink = `-- name: UpdateSocialLink :exec
UPDATE social_links
SET
    username = COALESCE($2, username),
    url = COALESCE($3, url),
    is_active = COALESCE($4, is_active),
    updated_at = CURRENT_TIMESTAMP
WHERE social_link_id = $1
`

type UpdateSocialLinkParams struct {
	SocialLinkID uuid.UUID `json:"social_link_id"`
	Username     string    `json:"username"`
	Url          string    `json:"url"`
	IsActive     *bool     `json:"is_active"`
}

func (q *Queries) UpdateSocialLink(ctx context.Context, arg UpdateSocialLinkParams) error {
	_, err := q.db.Exec(ctx, updateSocialLink,
		arg.SocialLinkID,
		arg.Username,
		arg.Url,
		arg.IsActive,
	)
	return err
}

const updateSocialLinkPosition = `-- name: UpdateSocialLinkPosition :exec
UPDATE social_links
SET
    position = $2,
    updated_at = CURRENT_TIMESTAMP
WHERE social_link_id = $1
`

type UpdateSocialLinkPositionParams struct {
	SocialLinkID uuid.UUID `json:"social_link_id"`
	Position     int32     `json:"position"`
}

func (q *Queries) UpdateSocialLinkPosition(ctx context.Context, arg UpdateSocialLinkPositionParams) error {
	_, err := q.db.Exec(ctx, updateSocialLinkPosition, arg.SocialLinkID, arg.Position)
	return err
}
