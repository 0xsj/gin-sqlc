// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: oauth.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createOAuthAccount = `-- name: CreateOAuthAccount :one
INSERT INTO oauth_accounts (
    user_id, provider, provider_user_id, email, name,
    access_token, refresh_token, token_expires_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING oauth_id, user_id, provider, provider_user_id, email, name, access_token, refresh_token, token_expires_at, created_at, updated_at
`

type CreateOAuthAccountParams struct {
	UserID         uuid.UUID  `json:"user_id"`
	Provider       string     `json:"provider"`
	ProviderUserID string     `json:"provider_user_id"`
	Email          *string    `json:"email"`
	Name           *string    `json:"name"`
	AccessToken    *string    `json:"access_token"`
	RefreshToken   *string    `json:"refresh_token"`
	TokenExpiresAt *time.Time `json:"token_expires_at"`
}

func (q *Queries) CreateOAuthAccount(ctx context.Context, arg CreateOAuthAccountParams) (*OauthAccount, error) {
	row := q.db.QueryRow(ctx, createOAuthAccount,
		arg.UserID,
		arg.Provider,
		arg.ProviderUserID,
		arg.Email,
		arg.Name,
		arg.AccessToken,
		arg.RefreshToken,
		arg.TokenExpiresAt,
	)
	var i OauthAccount
	err := row.Scan(
		&i.OauthID,
		&i.UserID,
		&i.Provider,
		&i.ProviderUserID,
		&i.Email,
		&i.Name,
		&i.AccessToken,
		&i.RefreshToken,
		&i.TokenExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const deleteAllUserOAuthAccounts = `-- name: DeleteAllUserOAuthAccounts :exec
DELETE FROM oauth_accounts
WHERE user_id = $1
`

func (q *Queries) DeleteAllUserOAuthAccounts(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteAllUserOAuthAccounts, userID)
	return err
}

const deleteOAuthAccount = `-- name: DeleteOAuthAccount :exec
DELETE FROM oauth_accounts
WHERE provider = $1 AND provider_user_id = $2
`

type DeleteOAuthAccountParams struct {
	Provider       string `json:"provider"`
	ProviderUserID string `json:"provider_user_id"`
}

func (q *Queries) DeleteOAuthAccount(ctx context.Context, arg DeleteOAuthAccountParams) error {
	_, err := q.db.Exec(ctx, deleteOAuthAccount, arg.Provider, arg.ProviderUserID)
	return err
}

const getOAuthAccountByProviderID = `-- name: GetOAuthAccountByProviderID :one
SELECT oauth_id, user_id, provider, provider_user_id, email, name, access_token, refresh_token, token_expires_at, created_at, updated_at FROM oauth_accounts
WHERE provider = $1 AND provider_user_id = $2
LIMIT 1
`

type GetOAuthAccountByProviderIDParams struct {
	Provider       string `json:"provider"`
	ProviderUserID string `json:"provider_user_id"`
}

func (q *Queries) GetOAuthAccountByProviderID(ctx context.Context, arg GetOAuthAccountByProviderIDParams) (*OauthAccount, error) {
	row := q.db.QueryRow(ctx, getOAuthAccountByProviderID, arg.Provider, arg.ProviderUserID)
	var i OauthAccount
	err := row.Scan(
		&i.OauthID,
		&i.UserID,
		&i.Provider,
		&i.ProviderUserID,
		&i.Email,
		&i.Name,
		&i.AccessToken,
		&i.RefreshToken,
		&i.TokenExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getOAuthAccountsByUserID = `-- name: GetOAuthAccountsByUserID :many
SELECT oauth_id, user_id, provider, provider_user_id, email, name, access_token, refresh_token, token_expires_at, created_at, updated_at FROM oauth_accounts
WHERE user_id = $1
`

func (q *Queries) GetOAuthAccountsByUserID(ctx context.Context, userID uuid.UUID) ([]*OauthAccount, error) {
	rows, err := q.db.Query(ctx, getOAuthAccountsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*OauthAccount
	for rows.Next() {
		var i OauthAccount
		if err := rows.Scan(
			&i.OauthID,
			&i.UserID,
			&i.Provider,
			&i.ProviderUserID,
			&i.Email,
			&i.Name,
			&i.AccessToken,
			&i.RefreshToken,
			&i.TokenExpiresAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOAuthTokens = `-- name: UpdateOAuthTokens :exec
UPDATE oauth_accounts
SET 
    access_token = $3,
    refresh_token = $4,
    token_expires_at = $5,
    updated_at = CURRENT_TIMESTAMP
WHERE provider = $1 AND provider_user_id = $2
`

type UpdateOAuthTokensParams struct {
	Provider       string     `json:"provider"`
	ProviderUserID string     `json:"provider_user_id"`
	AccessToken    *string    `json:"access_token"`
	RefreshToken   *string    `json:"refresh_token"`
	TokenExpiresAt *time.Time `json:"token_expires_at"`
}

func (q *Queries) UpdateOAuthTokens(ctx context.Context, arg UpdateOAuthTokensParams) error {
	_, err := q.db.Exec(ctx, updateOAuthTokens,
		arg.Provider,
		arg.ProviderUserID,
		arg.AccessToken,
		arg.RefreshToken,
		arg.TokenExpiresAt,
	)
	return err
}
