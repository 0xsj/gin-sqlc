// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: section.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const addLinkToSection = `-- name: AddLinkToSection :one
INSERT INTO section_links (
    section_id, link_id, position
) VALUES (
    $1, $2, $3
) RETURNING section_link_id, section_id, link_id, position
`

type AddLinkToSectionParams struct {
	SectionID uuid.UUID `json:"section_id"`
	LinkID    uuid.UUID `json:"link_id"`
	Position  int32     `json:"position"`
}

func (q *Queries) AddLinkToSection(ctx context.Context, arg AddLinkToSectionParams) (*SectionLink, error) {
	row := q.db.QueryRow(ctx, addLinkToSection, arg.SectionID, arg.LinkID, arg.Position)
	var i SectionLink
	err := row.Scan(
		&i.SectionLinkID,
		&i.SectionID,
		&i.LinkID,
		&i.Position,
	)
	return &i, err
}

const createSection = `-- name: CreateSection :one
INSERT INTO sections (
    user_id, title, description, position, is_active
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING section_id, user_id, title, description, position, is_active, created_at, updated_at
`

type CreateSectionParams struct {
	UserID      uuid.UUID `json:"user_id"`
	Title       string    `json:"title"`
	Description *string   `json:"description"`
	Position    int32     `json:"position"`
	IsActive    *bool     `json:"is_active"`
}

func (q *Queries) CreateSection(ctx context.Context, arg CreateSectionParams) (*Section, error) {
	row := q.db.QueryRow(ctx, createSection,
		arg.UserID,
		arg.Title,
		arg.Description,
		arg.Position,
		arg.IsActive,
	)
	var i Section
	err := row.Scan(
		&i.SectionID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.Position,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const deleteSection = `-- name: DeleteSection :exec
DELETE FROM sections
WHERE section_id = $1
`

func (q *Queries) DeleteSection(ctx context.Context, sectionID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteSection, sectionID)
	return err
}

const deleteUserSections = `-- name: DeleteUserSections :exec
DELETE FROM sections
WHERE user_id = $1
`

func (q *Queries) DeleteUserSections(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUserSections, userID)
	return err
}

const getActiveSectionsByUserID = `-- name: GetActiveSectionsByUserID :many
SELECT section_id, user_id, title, description, position, is_active, created_at, updated_at FROM sections
WHERE user_id = $1 AND is_active = true
ORDER BY position ASC
`

func (q *Queries) GetActiveSectionsByUserID(ctx context.Context, userID uuid.UUID) ([]*Section, error) {
	rows, err := q.db.Query(ctx, getActiveSectionsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Section
	for rows.Next() {
		var i Section
		if err := rows.Scan(
			&i.SectionID,
			&i.UserID,
			&i.Title,
			&i.Description,
			&i.Position,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSection = `-- name: GetSection :one
SELECT section_id, user_id, title, description, position, is_active, created_at, updated_at FROM sections
WHERE section_id = $1 LIMIT 1
`

func (q *Queries) GetSection(ctx context.Context, sectionID uuid.UUID) (*Section, error) {
	row := q.db.QueryRow(ctx, getSection, sectionID)
	var i Section
	err := row.Scan(
		&i.SectionID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.Position,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getSectionLinks = `-- name: GetSectionLinks :many
SELECT l.link_id, l.user_id, l.title, l.url, l.description, l.icon, l.custom_thumbnail_url, l.position, l.is_active, l.click_count, l.created_at, l.updated_at FROM links l
JOIN section_links sl ON l.link_id = sl.link_id
WHERE sl.section_id = $1
ORDER BY sl.position ASC
`

func (q *Queries) GetSectionLinks(ctx context.Context, sectionID uuid.UUID) ([]*Link, error) {
	rows, err := q.db.Query(ctx, getSectionLinks, sectionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Link
	for rows.Next() {
		var i Link
		if err := rows.Scan(
			&i.LinkID,
			&i.UserID,
			&i.Title,
			&i.Url,
			&i.Description,
			&i.Icon,
			&i.CustomThumbnailUrl,
			&i.Position,
			&i.IsActive,
			&i.ClickCount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSectionsByUserID = `-- name: GetSectionsByUserID :many
SELECT section_id, user_id, title, description, position, is_active, created_at, updated_at FROM sections
WHERE user_id = $1
ORDER BY position ASC
`

func (q *Queries) GetSectionsByUserID(ctx context.Context, userID uuid.UUID) ([]*Section, error) {
	rows, err := q.db.Query(ctx, getSectionsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Section
	for rows.Next() {
		var i Section
		if err := rows.Scan(
			&i.SectionID,
			&i.UserID,
			&i.Title,
			&i.Description,
			&i.Position,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeLinkFromSection = `-- name: RemoveLinkFromSection :exec
DELETE FROM section_links
WHERE section_id = $1 AND link_id = $2
`

type RemoveLinkFromSectionParams struct {
	SectionID uuid.UUID `json:"section_id"`
	LinkID    uuid.UUID `json:"link_id"`
}

func (q *Queries) RemoveLinkFromSection(ctx context.Context, arg RemoveLinkFromSectionParams) error {
	_, err := q.db.Exec(ctx, removeLinkFromSection, arg.SectionID, arg.LinkID)
	return err
}

const updateSection = `-- name: UpdateSection :exec
UPDATE sections
SET
    title = COALESCE($2, title),
    description = COALESCE($3, description),
    is_active = COALESCE($4, is_active),
    updated_at = CURRENT_TIMESTAMP
WHERE section_id = $1
`

type UpdateSectionParams struct {
	SectionID   uuid.UUID `json:"section_id"`
	Title       string    `json:"title"`
	Description *string   `json:"description"`
	IsActive    *bool     `json:"is_active"`
}

func (q *Queries) UpdateSection(ctx context.Context, arg UpdateSectionParams) error {
	_, err := q.db.Exec(ctx, updateSection,
		arg.SectionID,
		arg.Title,
		arg.Description,
		arg.IsActive,
	)
	return err
}

const updateSectionLinkPosition = `-- name: UpdateSectionLinkPosition :exec
UPDATE section_links
SET
    position = $3
WHERE section_id = $1 AND link_id = $2
`

type UpdateSectionLinkPositionParams struct {
	SectionID uuid.UUID `json:"section_id"`
	LinkID    uuid.UUID `json:"link_id"`
	Position  int32     `json:"position"`
}

func (q *Queries) UpdateSectionLinkPosition(ctx context.Context, arg UpdateSectionLinkPositionParams) error {
	_, err := q.db.Exec(ctx, updateSectionLinkPosition, arg.SectionID, arg.LinkID, arg.Position)
	return err
}

const updateSectionPosition = `-- name: UpdateSectionPosition :exec
UPDATE sections
SET
    position = $2,
    updated_at = CURRENT_TIMESTAMP
WHERE section_id = $1
`

type UpdateSectionPositionParams struct {
	SectionID uuid.UUID `json:"section_id"`
	Position  int32     `json:"position"`
}

func (q *Queries) UpdateSectionPosition(ctx context.Context, arg UpdateSectionPositionParams) error {
	_, err := q.db.Exec(ctx, updateSectionPosition, arg.SectionID, arg.Position)
	return err
}
