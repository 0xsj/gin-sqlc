// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: theme.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createTheme = `-- name: CreateTheme :one
INSERT INTO themes (
    name, background_color, text_color, button_style, font_family, is_premium, is_active
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING theme_id, name, background_color, text_color, button_style, font_family, is_premium, is_active, created_at, updated_at
`

type CreateThemeParams struct {
	Name            string  `json:"name"`
	BackgroundColor *string `json:"background_color"`
	TextColor       *string `json:"text_color"`
	ButtonStyle     *string `json:"button_style"`
	FontFamily      *string `json:"font_family"`
	IsPremium       *bool   `json:"is_premium"`
	IsActive        *bool   `json:"is_active"`
}

func (q *Queries) CreateTheme(ctx context.Context, arg CreateThemeParams) (*Theme, error) {
	row := q.db.QueryRow(ctx, createTheme,
		arg.Name,
		arg.BackgroundColor,
		arg.TextColor,
		arg.ButtonStyle,
		arg.FontFamily,
		arg.IsPremium,
		arg.IsActive,
	)
	var i Theme
	err := row.Scan(
		&i.ThemeID,
		&i.Name,
		&i.BackgroundColor,
		&i.TextColor,
		&i.ButtonStyle,
		&i.FontFamily,
		&i.IsPremium,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const createUserTheme = `-- name: CreateUserTheme :one
INSERT INTO user_themes (
    user_id, name, background_color, background_image_url, text_color, 
    button_style, font_family, custom_css, is_active
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING user_theme_id, user_id, name, background_color, background_image_url, text_color, button_style, font_family, custom_css, is_active, created_at, updated_at
`

type CreateUserThemeParams struct {
	UserID             uuid.UUID `json:"user_id"`
	Name               string    `json:"name"`
	BackgroundColor    *string   `json:"background_color"`
	BackgroundImageUrl *string   `json:"background_image_url"`
	TextColor          *string   `json:"text_color"`
	ButtonStyle        *string   `json:"button_style"`
	FontFamily         *string   `json:"font_family"`
	CustomCss          *string   `json:"custom_css"`
	IsActive           *bool     `json:"is_active"`
}

func (q *Queries) CreateUserTheme(ctx context.Context, arg CreateUserThemeParams) (*UserTheme, error) {
	row := q.db.QueryRow(ctx, createUserTheme,
		arg.UserID,
		arg.Name,
		arg.BackgroundColor,
		arg.BackgroundImageUrl,
		arg.TextColor,
		arg.ButtonStyle,
		arg.FontFamily,
		arg.CustomCss,
		arg.IsActive,
	)
	var i UserTheme
	err := row.Scan(
		&i.UserThemeID,
		&i.UserID,
		&i.Name,
		&i.BackgroundColor,
		&i.BackgroundImageUrl,
		&i.TextColor,
		&i.ButtonStyle,
		&i.FontFamily,
		&i.CustomCss,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const deleteTheme = `-- name: DeleteTheme :exec
DELETE FROM themes
WHERE theme_id = $1
`

func (q *Queries) DeleteTheme(ctx context.Context, themeID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteTheme, themeID)
	return err
}

const deleteUserTheme = `-- name: DeleteUserTheme :exec
DELETE FROM user_themes
WHERE user_theme_id = $1
`

func (q *Queries) DeleteUserTheme(ctx context.Context, userThemeID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUserTheme, userThemeID)
	return err
}

const getTheme = `-- name: GetTheme :one
SELECT theme_id, name, background_color, text_color, button_style, font_family, is_premium, is_active, created_at, updated_at FROM themes
WHERE theme_id = $1 LIMIT 1
`

func (q *Queries) GetTheme(ctx context.Context, themeID uuid.UUID) (*Theme, error) {
	row := q.db.QueryRow(ctx, getTheme, themeID)
	var i Theme
	err := row.Scan(
		&i.ThemeID,
		&i.Name,
		&i.BackgroundColor,
		&i.TextColor,
		&i.ButtonStyle,
		&i.FontFamily,
		&i.IsPremium,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getThemeByName = `-- name: GetThemeByName :one
SELECT theme_id, name, background_color, text_color, button_style, font_family, is_premium, is_active, created_at, updated_at FROM themes
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetThemeByName(ctx context.Context, name string) (*Theme, error) {
	row := q.db.QueryRow(ctx, getThemeByName, name)
	var i Theme
	err := row.Scan(
		&i.ThemeID,
		&i.Name,
		&i.BackgroundColor,
		&i.TextColor,
		&i.ButtonStyle,
		&i.FontFamily,
		&i.IsPremium,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getUserTheme = `-- name: GetUserTheme :one
SELECT user_theme_id, user_id, name, background_color, background_image_url, text_color, button_style, font_family, custom_css, is_active, created_at, updated_at FROM user_themes
WHERE user_theme_id = $1 LIMIT 1
`

func (q *Queries) GetUserTheme(ctx context.Context, userThemeID uuid.UUID) (*UserTheme, error) {
	row := q.db.QueryRow(ctx, getUserTheme, userThemeID)
	var i UserTheme
	err := row.Scan(
		&i.UserThemeID,
		&i.UserID,
		&i.Name,
		&i.BackgroundColor,
		&i.BackgroundImageUrl,
		&i.TextColor,
		&i.ButtonStyle,
		&i.FontFamily,
		&i.CustomCss,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getUserThemeByName = `-- name: GetUserThemeByName :one
SELECT user_theme_id, user_id, name, background_color, background_image_url, text_color, button_style, font_family, custom_css, is_active, created_at, updated_at FROM user_themes
WHERE user_id = $1 AND name = $2 LIMIT 1
`

type GetUserThemeByNameParams struct {
	UserID uuid.UUID `json:"user_id"`
	Name   string    `json:"name"`
}

func (q *Queries) GetUserThemeByName(ctx context.Context, arg GetUserThemeByNameParams) (*UserTheme, error) {
	row := q.db.QueryRow(ctx, getUserThemeByName, arg.UserID, arg.Name)
	var i UserTheme
	err := row.Scan(
		&i.UserThemeID,
		&i.UserID,
		&i.Name,
		&i.BackgroundColor,
		&i.BackgroundImageUrl,
		&i.TextColor,
		&i.ButtonStyle,
		&i.FontFamily,
		&i.CustomCss,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getUserThemes = `-- name: GetUserThemes :many
SELECT user_theme_id, user_id, name, background_color, background_image_url, text_color, button_style, font_family, custom_css, is_active, created_at, updated_at FROM user_themes
WHERE user_id = $1
ORDER BY name ASC
`

func (q *Queries) GetUserThemes(ctx context.Context, userID uuid.UUID) ([]*UserTheme, error) {
	rows, err := q.db.Query(ctx, getUserThemes, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*UserTheme
	for rows.Next() {
		var i UserTheme
		if err := rows.Scan(
			&i.UserThemeID,
			&i.UserID,
			&i.Name,
			&i.BackgroundColor,
			&i.BackgroundImageUrl,
			&i.TextColor,
			&i.ButtonStyle,
			&i.FontFamily,
			&i.CustomCss,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFreeThemes = `-- name: ListFreeThemes :many
SELECT theme_id, name, background_color, text_color, button_style, font_family, is_premium, is_active, created_at, updated_at FROM themes
WHERE is_premium = false AND is_active = true
ORDER BY name ASC
`

func (q *Queries) ListFreeThemes(ctx context.Context) ([]*Theme, error) {
	rows, err := q.db.Query(ctx, listFreeThemes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Theme
	for rows.Next() {
		var i Theme
		if err := rows.Scan(
			&i.ThemeID,
			&i.Name,
			&i.BackgroundColor,
			&i.TextColor,
			&i.ButtonStyle,
			&i.FontFamily,
			&i.IsPremium,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPremiumThemes = `-- name: ListPremiumThemes :many
SELECT theme_id, name, background_color, text_color, button_style, font_family, is_premium, is_active, created_at, updated_at FROM themes
WHERE is_premium = true AND is_active = true
ORDER BY name ASC
`

func (q *Queries) ListPremiumThemes(ctx context.Context) ([]*Theme, error) {
	rows, err := q.db.Query(ctx, listPremiumThemes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Theme
	for rows.Next() {
		var i Theme
		if err := rows.Scan(
			&i.ThemeID,
			&i.Name,
			&i.BackgroundColor,
			&i.TextColor,
			&i.ButtonStyle,
			&i.FontFamily,
			&i.IsPremium,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listThemes = `-- name: ListThemes :many
SELECT theme_id, name, background_color, text_color, button_style, font_family, is_premium, is_active, created_at, updated_at FROM themes
WHERE is_active = true
ORDER BY name ASC
`

func (q *Queries) ListThemes(ctx context.Context) ([]*Theme, error) {
	rows, err := q.db.Query(ctx, listThemes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Theme
	for rows.Next() {
		var i Theme
		if err := rows.Scan(
			&i.ThemeID,
			&i.Name,
			&i.BackgroundColor,
			&i.TextColor,
			&i.ButtonStyle,
			&i.FontFamily,
			&i.IsPremium,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTheme = `-- name: UpdateTheme :exec
UPDATE themes
SET
    background_color = COALESCE($2, background_color),
    text_color = COALESCE($3, text_color),
    button_style = COALESCE($4, button_style),
    font_family = COALESCE($5, font_family),
    is_premium = COALESCE($6, is_premium),
    is_active = COALESCE($7, is_active),
    updated_at = CURRENT_TIMESTAMP
WHERE theme_id = $1
`

type UpdateThemeParams struct {
	ThemeID         uuid.UUID `json:"theme_id"`
	BackgroundColor *string   `json:"background_color"`
	TextColor       *string   `json:"text_color"`
	ButtonStyle     *string   `json:"button_style"`
	FontFamily      *string   `json:"font_family"`
	IsPremium       *bool     `json:"is_premium"`
	IsActive        *bool     `json:"is_active"`
}

func (q *Queries) UpdateTheme(ctx context.Context, arg UpdateThemeParams) error {
	_, err := q.db.Exec(ctx, updateTheme,
		arg.ThemeID,
		arg.BackgroundColor,
		arg.TextColor,
		arg.ButtonStyle,
		arg.FontFamily,
		arg.IsPremium,
		arg.IsActive,
	)
	return err
}

const updateUserTheme = `-- name: UpdateUserTheme :exec
UPDATE user_themes
SET
    name = COALESCE($2, name),
    background_color = COALESCE($3, background_color),
    background_image_url = COALESCE($4, background_image_url),
    text_color = COALESCE($5, text_color),
    button_style = COALESCE($6, button_style),
    font_family = COALESCE($7, font_family),
    custom_css = COALESCE($8, custom_css),
    is_active = COALESCE($9, is_active),
    updated_at = CURRENT_TIMESTAMP
WHERE user_theme_id = $1
`

type UpdateUserThemeParams struct {
	UserThemeID        uuid.UUID `json:"user_theme_id"`
	Name               string    `json:"name"`
	BackgroundColor    *string   `json:"background_color"`
	BackgroundImageUrl *string   `json:"background_image_url"`
	TextColor          *string   `json:"text_color"`
	ButtonStyle        *string   `json:"button_style"`
	FontFamily         *string   `json:"font_family"`
	CustomCss          *string   `json:"custom_css"`
	IsActive           *bool     `json:"is_active"`
}

func (q *Queries) UpdateUserTheme(ctx context.Context, arg UpdateUserThemeParams) error {
	_, err := q.db.Exec(ctx, updateUserTheme,
		arg.UserThemeID,
		arg.Name,
		arg.BackgroundColor,
		arg.BackgroundImageUrl,
		arg.TextColor,
		arg.ButtonStyle,
		arg.FontFamily,
		arg.CustomCss,
		arg.IsActive,
	)
	return err
}
